package googlejam8.p636;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * Google code jam problem solver.
 * Template generated by <a href="https://github.com/Faylixe/jammy">Jammy</a> plugin.
 * 
 * @author
 */
public final class SenateEvacuationSolver {

	/** Scanner instance that allows to parse problem input. **/
	private final Scanner scanner;

	/**
	 * Default constructor.
	 * 
	 * @param scanner Scanner instance that allows to parse problem input. 
	 */
	private SenateEvacuationSolver(final Scanner scanner) {
		this.scanner = scanner;
	}

	/**
	 * Solver entry point.
	 * 
	 * @param args Command line parameters.
	 * @throws FileNotFoundException If input file could not be parsed.
	 */
	public static void main(final String [] args) throws FileNotFoundException {
		final File file = new File(args[0]);
		final Scanner scanner = new Scanner(file);
		final int n = scanner.nextInt();
		final SenateEvacuationSolver solver = new SenateEvacuationSolver(scanner);
		for (int i = 0; i < n; i++) {
			System.out.print("Case #" + (i + 1) + ":");
			int n1 = solver.scanner.nextInt();
			int[] p = new int[27];
			int t = 0;
			for (int i1 = 1; i1 <= n1; i1++) {
				p[i1] = solver.scanner.nextInt();
				t += p[i1];
			}
			
			boolean first = true;
			while (t > 0) {
				int max = 1;
				for (int i2 = 1; i2 <= n1; i2++) {
					if (p[i2] > p[max]) {
						max = i2;
					}
				}
				if (t == 2) {
					if (p[max] == 2) {
						p[max] -= 2;
						t -= 2;
						System.out.print(" ");
						System.out.print((char) (64 + max));
						System.out.print((char) (64 + max));
					} else if (p[max] == 1) {
						p[max]--;
						t--;
						System.out.print(" ");
						System.out.print((char) (64 + max));
						
						max = 1;
						for (int i3 = 1; i3 <= n1; i3++) {
							if (p[i3] > p[max]) {
								max = i3;
							}
						}
						p[max]--;
						t--;
						System.out.print((char) (64 + max));
					}
				} else if (t == 3) {
					p[max]--;
					t--;
					System.out.print(" ");
					System.out.print(Character.toString((char) (64 + max)));
				} else {
					p[max]--;
					t--;
					System.out.print(" ");
					System.out.print((char) (64 + max));
					
					max = 1;
					for (int i4 = 1; i4 <= n1; i4++) {
						if (p[i4] > p[max]) {
							max = i4;
						}
					}
					p[max]--;
					t--;
					System.out.print((char) (64 + max));
				}
			}
			System.out.println();
		}
		scanner.close();
	}

}